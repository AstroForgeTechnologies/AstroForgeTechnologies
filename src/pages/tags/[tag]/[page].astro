---
import { type CollectionEntry, getCollection } from "astro:content";
import TagPosts from "@layouts/TagPosts.astro";
import getUniqueTags from "../../../utils/tagHelper";
import getPostsByTag from "@utils/getPostsByTag";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";
import { type Tag } from "../../../utils/tagHelper";

export interface Props {
  post: CollectionEntry<"development">;
  tag: Tag;
}

export async function getStaticPaths() {
  const posts = await getCollection("development");

  const tags = getUniqueTags(posts);

  return tags.flatMap(tag => {
    const tagPosts = getPostsByTag(posts, tag);
    const totalPages = getPageNumbers(tagPosts.length);

    return totalPages.map(page => ({
      params: { tag: tag.tagSlug, page: page },
      props: { tag: tag },
    }));
  });
}

const { page } = Astro.params;
const { tag } = Astro.props;

const posts = await getCollection("development", ({ data }) => !data.draft);

const postsByTag = getPostsByTag(posts, tag);

const pagination = getPagination({
  posts: postsByTag,
  page,
});
---

<TagPosts {...pagination} {tag} />
