---
import { type CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";
import postFilter from "../../../utils/postFilter";
import { slugifyStr } from "../../../utils/slugify";

export interface Props {
  post: CollectionEntry<"development">;
}

export async function getStaticPaths() {
  const posts = await getCollection("development", data => postFilter(data));

  const postResult = posts.map((post, i) => ({
    params: { slug: slugifyStr(post.slug) },
    props: {
      post,
      before: i > 0 ? posts[i - 1] : undefined,
      after: i < posts.length - 1 ? posts[i + 1] : undefined,
    },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post, before, after } = Astro.props;

const posts = await getCollection("development");

const sortedPosts = getSortedPosts(posts);

const pagination = getPagination({
  posts: sortedPosts,
  page: slug,
});
---

{
  post ? (
    <PostDetails post={post} {before} {after} />
  ) : (
    <Posts {...pagination} />
  )
}
