---
import Layout from "@layouts/Layout.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime.svelte";
import useModDateTime from "@utils/useModDateTime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import { SITE } from "@config";
import { getUniqueTagsOfTags, type InputTag } from "../utils/tagHelper";
import Main from "./Main.astro";
import ScrollProgressIndicator from "@components/ScrollProgressIndicator.svelte";
import Hr from "../components/Hr.astro";

export interface Props {
  post: CollectionEntry<"development">;
  before: CollectionEntry<"development"> | undefined;
  after: CollectionEntry<"development"> | undefined;
}

const { post, before, after } = Astro.props;

const {
  title,
  description,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
  authors,
} = post.data;

const { Content } = await post.render();

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author:
    authors && authors.length > 0
      ? authors[0].substring(0, 1).toUpperCase() + authors[0].substring(1)
      : SITE.author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  scrollSmooth: true,
};

const uniqueTags = getUniqueTagsOfTags(tags as InputTag[]);
---

<Layout {...layoutProps}>
  <ScrollProgressIndicator client:only="svelte" />

  <Main
    pageTitle={title}
    titleTransition={slugifyStr(title)}
    headingClass="text-2xl font-semibold text-skin-accent"
    topType="back"
  >
    <h2 class="italic mt-2 mb-4">{description}</h2>
    {
      useModDateTime(pubDatetime, modDatetime) ? (
        <>
          <Datetime
            dateTime={pubDatetime}
            category="Originally Published"
            size="lg"
            className="my-2"
            italic={false}
          />
          <Datetime
            dateTime={modDatetime}
            category="Updated"
            size="lg"
            className="my-2"
            italic={false}
          />
        </>
      ) : (
        <Datetime
          dateTime={pubDatetime}
          size="lg"
          className="my-2"
          italic={false}
        />
      )
    }

    <article
      id="article"
      role="article"
      class="prose mx-auto mt-5 mb-5 max-w-4xl"
    >
      <Content />
    </article>

    <Hr noPadding />
    <div class="flex flex-row items-center justify-between mt-8">
      {
        before && (
          <a
            href={`/development/${slugifyStr(before.slug)}`}
            class="mr-auto hover:text-accent transition-colors duration-200"
          >
            ← {before.data.title}
          </a>
        )
      }
      {
        after && (
          <a
            href={`/development/${slugifyStr(after.slug)}`}
            class="ml-auto hover:text-accent transition-colors duration-200"
          >
            {after.data.title} →
          </a>
        )
      }
    </div>

    <ul class="mt-5 mb-8">
      {uniqueTags.map(tag => <Tag tag={tag} />)}
    </ul>
  </Main>
  <Footer />
</Layout>

<style>
  main {
    @apply pb-12;
  }
  .post-title {
    @apply text-2xl font-semibold text-skin-accent;
  }
</style>

<script is:inline>
  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");
      link.innerText = "#";
      link.className =
        "heading-link opacity-0 group-hover:opacity-100 ml-2 transition-[opacity] ease-in-out duration-200";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 256 256" class="fill-skin-base hover:fill-skin-accent opacity-0 group-hover:opacity-100 transition-all duration-[300ms] ease-in-out">
        <g>
          <path d="M184 72v144H40V72Z" opacity="0.2"/>
          <path d="M184 64H40a8 8 0 0 0-8 8v144a8 8 0 0 0 8 8h144a8 8 0 0 0 8-8V72a8 8 0 0 0-8-8m-8 144H48V80h128Zm48-168v144a8 8 0 0 1-16 0V48H72a8 8 0 0 1 0-16h144a8 8 0 0 1 8 8"/>
        </g>
      </svg>`;
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";
      wrapper.className = "group";

      let copyButton = document.createElement("button");
      copyButton.className =
        "absolute right-0 top-0 rounded px-2 py-2 text-xs leading-4 text-skin-base font-medium flex";
      copyButton.innerHTML = copyButtonHTML;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
        <path fill="#72CC50" d="M21 7L9 19l-5.5-5.5l1.41-1.41L9 16.17L19.59 5.59z" />
      </svg>
      `;

      setTimeout(() => {
        button.innerHTML = copyButtonHTML;
      }, 700);
    }
  }
  attachCopyButtons();
</script>
